<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title></title>
</head>
<body>
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.6.0/underscore-min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.2/backbone-min.js"></script>
    <script>
        /*
         var Appointment = Backbone.Model.extend({});
         AppointmenetList Collection 을 생성해보자.
        */

        var Appointment = Backbone.Model.extend({

        });

        var AppointmentList = Backbone.Collection.extend({
            model: Appointment
        });

        /*
         var appointments = new AppointmentList();
         var json = [
         {title: 'Back pain'},
         {title: 'Dry mouth'},
         {title: 'Headache'}
         ];
         appointments 컬랙션에 json 데이터를 넣어보자.
         */
        var appointmentList = new AppointmentList();
        var json = [
            {title: 'Back pain'},
            {title: 'Dry mouth'},
            {title: 'Headache'}
        ];
        appointmentList.reset(json);
        console.log('length : ' + appointmentList.length);

        /*
         appointments URL 을 이용해서, 데이터를 가져오는 방법을 만들어보자.

         var Appointment = Backbone.Model.extend({});
         var AppointmentList = Backbone.Collection.extend({
         model: Appointment
         });
         var appointments = new AppointmentList();
        */

        var TodoList = Backbone.Collection.extend({
            url: '/todos'
        });

        var todoList = new TodoList();
        todoList.fetch({
            success:function(){
                todoList.forEach(function(todo){
                    console.log(todo.get('description'));
                })
            }
        });

        /*
         var Appointment = Backbone.Model.extend({});
         var AppointmentList = Backbone.Collection.extend({
         model: Appointment
         });

         var appointments = new AppointmentList();
         appointments.fetch();

         reset 이벤트가 발생할 경우 현재 컬랙션의 갯수를 출력하는 이벤트를 등록
        */

        appointmentList.on('reset', function(){
            alert(appointmentList.length);
        });

        appointmentList.reset(json);

        /*
         var Appointment = Backbone.Model.extend({});
         var AppointmentList = Backbone.Collection.extend({
         model: Appointment
         });
         var appointments = new AppointmentList();

         appointments.fetch();
         데이터를 변경하지 않고 fetch를 적용하고 싶습니다. 어떻게 할까요?
        */
        // 잉??

        /*
         var Appointment = Backbone.Model.extend({});
         var AppointmentList = Backbone.Collection.extend({
         model: Appointment
         });

         var appointments = new AppointmentList();

         모델이 추가 되었을 때, 모델의 title을 Log로 보여주세요~
        */

        appointmentList.on('add', function(appointment){
            console.log(appointment.get('title'));
        });

        var appointmentItem = new Appointment({
            title : 'hello'
        })
        appointmentList.add(appointmentItem);

        /*
         var Appointment = Backbone.Model.extend({});
         var AppointmentList = Backbone.Collection.extend({
         model: Appointment
         });
         var appointments = new AppointmentList();

         var titles;

         map iteeration 을 이용하여, 각각의 title 값을 배열로 만들어 봅시다.
         */

        var titles = appointmentList.map(function(appointment){
            return appointment.get('title');
        });
        console.log(titles);
    </script>
</body>
</html>

