<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title></title>
</head>
<body>
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.6.0/underscore-min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.2/backbone-min.js"></script>
    <script>
        /*
        var Appointment = Backbone.Model.extend({});

        var AppointmentList = Backbone.Collection.extend({
            model: Appointment
        });


        var appointments = new AppointmentList();

        AppointmentListView 라는 것을 만들어서, 인스턴스를 하나 생성
        model에 Collection을 추가해라
        */
        var Appointment = Backbone.Model.extend({

        });

        var AppointmentList = Backbone.Collection.extend({
            model:Appointment
        });

        var AppointmentListView = Backbone.View.extend({

        });

        var appointmentList = new AppointmentList();
        var json = [
            {title: 'Back pain'},
            {title: 'Dry mouth'},
            {title: 'Headache'}
        ];
        appointmentList.reset(json);

        var appointmentListView = new AppointmentListView({
            collection: appointmentList
        })
        /*
        2.

        MODEL

        var Appointment = Backbone.Model.extend({});

        var AppointmentList = Backbone.Collection.extend({
            model: Appointment
        });

        VIEW

        var AppointmentView = Backbone.View.extend({
            template: _.template('<span class="<%= if(cancelled) print("cancelled") %>">' +
                    '<%= title %></span>' +
                    '<a href="#">x</a>'),


            render: function(){
                this.$el.html(this.template(this.model.toJSON()));
                return this;
            }
        });

        var AppointmentListView = Backbone.View.extend({
            render: function(){
                this.collection.forEach(this.addOne);
            },
            addOne: function(model){

            }
        });

        AppointmentListView  각각의 모델을 랜더링하고, View의 top-level 에 추가할 수 있는
        addOne 함수를 구현. 구현할 때 버그인 부분이 있는 해당 부분을 잘 찾아보세요~

                3.

        MODEL

        var Appointment = Backbone.Model.extend({});

        var AppointmentList = Backbone.Collection.extend({
            model: Appointment
        });

        VIEWS

        var AppointmentView = Backbone.View.extend({
            template: _.template('<span class="<%= if(cancelled) print("cancelled") %>">' +
                    '<%= title %></span>' +
                    '<a href="#">x</a>'),


            render: function(){
                this.$el.html(this.template(this.model.toJSON()));
                return this;
            }
        });


        var AppointmentListView = Backbone.View.extend({
            render: function(){
                this.collection.forEach(this.addOne, this);
                return this;
            },
            addOne: function(model){
                var appointmentView = new AppointmentView({model: model});
                appointmentView.render()
                this.$el.append(appointmentView.el);
            }
        });

        var appointmentsView = new AppointmentListView({collection: appointmentList});

        자 이젠 Collection을 jquery 를 이용해서 #app div에 추가해 봅시다.


        4. 새로운 모델이 추가될 때 자동으로 랜더링 할 수 있는 함수 구현
        5. Reset 이벤트에 대한 구현
        6. 모델 삭제할 때 View에서는 hide 이벤트가 동작하도록 구현
        */
    </script>
</body>
</html>

